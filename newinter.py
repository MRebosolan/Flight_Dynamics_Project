import numpy as np
import integration1d
import matplotlib.pyplot as plt
import loadfunction
def basis( x,cord,j,m):
    b = (x - cord[m]) / (cord[j] - cord[m])
    return b

def torquerloader3000():
    def interpolate(x,val,cord):
        y = 0
        for j in range(41):
            t = 1
            for m in range(41):
                if m != j:
                    t = t * basis(x, cord,j,m)

            y += t * val[j]
        return y

    val1, val0 = integration1d.resultandtorques()
    bo,ko,lo = loadfunction.coordinates()
    #cord = [-0.0020326662299638095, -0.010151402656127366, -0.026341231534832102, -0.05050714451261541, -0.08250732640297075, -0.12215398741425262, -0.16921446517484512, -0.22341259008847275, -0.28443030600720537, -0.3519095367114038, -0.4254542872433593, -0.504632967763166, -0.5889809262895155, -0.6780031754622838, -0.771177297325184, -0.867956509082064, -0.9677728718357723, -1.0700406234794384, -1.1741596161814338, -1.279518838291486, -1.3855, -1.4914811617085137, -1.5968403838185656, -1.7009593765205613, -1.8032271281642276, -1.903043490917936, -1.9998227026748157, -2.0929968245377157, -2.1820190737104843, -2.266367032236834, -2.3455457127566404, -2.4190904632885957, -2.4865696939927946, -2.547587409911527, -2.6017855348251544, -2.6488460125857474, -2.688492673597029, -2.720492855487384, -2.7446587684651678, -2.7608485973438723, -2.768967333770036]
    #val0 = [0.01199151324997775, 0.026770497883275318, 0.043033249364099156, 0.059400664573821496, 0.07559897024655647, 0.09149028940531988, 0.1069714893449812, 0.12194811289371496, 0.1363314800069291, 0.15003512460405374, 0.16298205870035107, 0.17510182675861136, 0.18635066216160545, 0.19670382091066071, 0.20617531818136875, 0.21481240497601406, 0.22268545645327997, 0.2298982836874482, 0.23654188896257902, 0.24268661602783018, 0.24834921257358764, 0.2534634151509892, 0.25786404132746427, 0.26130323723036936, 0.26343252571800924, 0.26385605350290575, 0.2621645528059161, 0.2579594922339752, 0.2509185117407634, 0.2408016133206642, 0.22750492932758903, 0.2110668658500141, 0.19168122663067017, 0.16970094045432743, 0.14564048636863366, 0.12016313352184975, 0.09407836482677626, 0.06834842272280209, 0.04412280080110707, 0.022909315068396028, 0.007476666534629988]

    #val1 = [-0.3612118011135845, -0.805329468275473, -1.2911380520711933, -1.7750217906760213, -2.2465907350719676, -2.6996346980801023, -3.1289908189312152, -3.5300165293099535, -3.8985213501984206, -4.231082634979056, -4.524990480184597, -4.778713992142574, -4.991974797119723, -5.165841947405614, -5.302903053382802, -5.406845040778388, -5.482294191666362, -5.534433682796577, -5.567945220184565, -5.586845649730264, -5.593541500313342, -5.588389705291184, -5.569652995282035, -5.533549968345297, -5.474770770752307, -5.386996950760715, -5.263807207069778, -5.099366367286841, -4.889093113433274, -4.63012469924575, -4.321802912995303, -3.965906724515815, -3.5665361094146766, -3.1303631037383415, -2.6663843588461003, -2.185875596463329, -1.702287146911564, -1.2314810801303857, -0.7924767201402005, -0.4106059585156199, -0.13386287553352832]
    xxx = np.linspace(0,-2.76,100)
    y = []
    z = []
    for element in xxx:
        y.append(interpolate(element,val1,ko[:41]))
        z.append(interpolate(element,val0,ko[:41]))

    fig, ax1 = plt.subplots()

    color = 'tab:red'
    ax1.set_xlabel('Spanwise x [m]')
    ax1.set_ylabel('Q(x)', color=color)
    ax1.plot(xxx, y, color=color)
    ax1.tick_params(axis='y', labelcolor=color)
    plt.gca().invert_yaxis()
    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    color = 'tab:blue'
    ax2.set_ylabel('T(x)', color=color)  # we already handled the x-label with ax1
    ax2.plot(xxx, z, color=color)
    ax2.tick_params(axis='y', labelcolor=color)
    plt.gca().invert_yaxis()
    fig.tight_layout()  # otherwise the right y-label is slightly clipped

    return y,z
